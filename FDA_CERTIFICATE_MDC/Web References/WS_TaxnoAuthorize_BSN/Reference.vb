'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace WS_TaxnoAuthorize_BSN
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WebService1Soap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class WebService1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private insert_taxnoauthorizeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private update_lcnsidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private update_name_companyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.FDA_CERTIFICATE_MDC.My.MySettings.Default.FDA_CERTIFICATE_MDC_WS_TaxnoAuthorize_BSN_WebService1
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event insert_taxnoauthorizeCompleted As insert_taxnoauthorizeCompletedEventHandler
        
        '''<remarks/>
        Public Event update_lcnsidCompleted As update_lcnsidCompletedEventHandler
        
        '''<remarks/>
        Public Event update_name_companyCompleted As update_name_companyCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insert_taxnoauthorize", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function insert_taxnoauthorize(ByVal _taxno_authorize As String) As String
            Dim results() As Object = Me.Invoke("insert_taxnoauthorize", New Object() {_taxno_authorize})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub insert_taxnoauthorizeAsync(ByVal _taxno_authorize As String)
            Me.insert_taxnoauthorizeAsync(_taxno_authorize, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub insert_taxnoauthorizeAsync(ByVal _taxno_authorize As String, ByVal userState As Object)
            If (Me.insert_taxnoauthorizeOperationCompleted Is Nothing) Then
                Me.insert_taxnoauthorizeOperationCompleted = AddressOf Me.Oninsert_taxnoauthorizeOperationCompleted
            End If
            Me.InvokeAsync("insert_taxnoauthorize", New Object() {_taxno_authorize}, Me.insert_taxnoauthorizeOperationCompleted, userState)
        End Sub
        
        Private Sub Oninsert_taxnoauthorizeOperationCompleted(ByVal arg As Object)
            If (Not (Me.insert_taxnoauthorizeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent insert_taxnoauthorizeCompleted(Me, New insert_taxnoauthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/update_lcnsid", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function update_lcnsid(ByVal _taxno_authorize As String) As Boolean
            Dim results() As Object = Me.Invoke("update_lcnsid", New Object() {_taxno_authorize})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub update_lcnsidAsync(ByVal _taxno_authorize As String)
            Me.update_lcnsidAsync(_taxno_authorize, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub update_lcnsidAsync(ByVal _taxno_authorize As String, ByVal userState As Object)
            If (Me.update_lcnsidOperationCompleted Is Nothing) Then
                Me.update_lcnsidOperationCompleted = AddressOf Me.Onupdate_lcnsidOperationCompleted
            End If
            Me.InvokeAsync("update_lcnsid", New Object() {_taxno_authorize}, Me.update_lcnsidOperationCompleted, userState)
        End Sub
        
        Private Sub Onupdate_lcnsidOperationCompleted(ByVal arg As Object)
            If (Not (Me.update_lcnsidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent update_lcnsidCompleted(Me, New update_lcnsidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/update_name_company", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub update_name_company(ByVal _taxno_authorize As String)
            Me.Invoke("update_name_company", New Object() {_taxno_authorize})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub update_name_companyAsync(ByVal _taxno_authorize As String)
            Me.update_name_companyAsync(_taxno_authorize, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub update_name_companyAsync(ByVal _taxno_authorize As String, ByVal userState As Object)
            If (Me.update_name_companyOperationCompleted Is Nothing) Then
                Me.update_name_companyOperationCompleted = AddressOf Me.Onupdate_name_companyOperationCompleted
            End If
            Me.InvokeAsync("update_name_company", New Object() {_taxno_authorize}, Me.update_name_companyOperationCompleted, userState)
        End Sub
        
        Private Sub Onupdate_name_companyOperationCompleted(ByVal arg As Object)
            If (Not (Me.update_name_companyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent update_name_companyCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub insert_taxnoauthorizeCompletedEventHandler(ByVal sender As Object, ByVal e As insert_taxnoauthorizeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class insert_taxnoauthorizeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub update_lcnsidCompletedEventHandler(ByVal sender As Object, ByVal e As update_lcnsidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class update_lcnsidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub update_name_companyCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
End Namespace
